from fastapi import FastAPI
from fastapi.responses import JSONResponse
import os

app = FastAPI()

@app.get("/health")
def health(token: str | None = None):
    tok = os.getenv("TASK_API_TOKEN", "changeme")
    if tok and token != tok:
        return JSONResponse({"error": "unauthorized"}, status_code=401)
    return {"status": "ok"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=int(os.getenv("TASK_API_PORT","8766")))

# ===== BASIC_AUTH_MIDDLEWARE BEGIN =====
import os, base64, hmac
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response
from starlette.status import HTTP_401_UNAUTHORIZED
from starlette.requests import Request

# Параметры из окружения (см. systemd drop-in)
_BUSER = os.getenv("TASK_API_BASIC_USER", "")
_BPASS = os.getenv("TASK_API_BASIC_PASS", "")

# Какие префиксы защищаем (write/queue):
_PROTECTED = ("/enqueue", "/report_pack", "/task", "/tasks")

def _needs_auth(path: str) -> bool:
    return any(path.startswith(p) for p in _PROTECTED)

def _parse_basic(auth_header: str | None):
    if not auth_header or not auth_header.lower().startswith("basic "):
        return None, None
    try:
        decoded = base64.b64decode(auth_header.split(" ", 1)[1]).decode("utf-8")
        user, pwd = decoded.split(":", 1)
        return user, pwd
    except Exception:
        return None, None

class _BasicAuthMW(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        # Оставляем открытыми health и любые read-only отчёты
        path = request.url.path
        if not _needs_auth(path):
            return await call_next(request)
        user, pwd = _parse_basic(request.headers.get("authorization"))
        ok = (
            user is not None
            and hmac.compare_digest(user, _BUSER)
            and hmac.compare_digest((pwd or ""), _BPASS)
        )
        if not ok:
            return Response(
                "Unauthorized",
                status_code=HTTP_401_UNAUTHORIZED,
                headers={"WWW-Authenticate": 'Basic realm="task-api"'},
            )
        return await call_next(request)

try:
    app  # type: ignore[name-defined]
    app.add_middleware(_BasicAuthMW)
except NameError:
    # Если по какой-то причине app ещё не объявлен — ничего не делаем.
    pass
# ===== BASIC_AUTH_MIDDLEWARE END =====
