from fastapi import FastAPI
from fastapi.responses import JSONResponse
import os

app = FastAPI()

@app.get("/health")
def health(token: str | None = None):
    tok = os.getenv("TASK_API_TOKEN", "changeme")
    if tok and token != tok:
        return JSONResponse({"error": "unauthorized"}, status_code=401)
    return {"status": "ok"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=int(os.getenv("TASK_API_PORT","8766")))

# ===== BASIC_AUTH_MIDDLEWARE BEGIN =====
import os, base64, hmac
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response, JSONResponse
from starlette.status import HTTP_401_UNAUTHORIZED
from starlette.requests import Request

# env из systemd drop-in
_BUSER=os.getenv("TASK_API_BASIC_USER","")
_BPASS=os.getenv("TASK_API_BASIC_PASS","")

# allowlist: открытые пути
_WHITELIST_EXACT={"/","/health","/openapi.json","/docs","/docs/"}
_WHITELIST_PREFIX=("/reports","/static","/assets")

# защищаем только write/queue
_PROTECTED_PREFIX=("/enqueue","/report_pack","/task","/tasks")

def _path_whitelisted(p:str)->bool:
    return p in _WHITELIST_EXACT or any(p.startswith(pref) for pref in _WHITELIST_PREFIX)

def _needs_auth(p:str)->bool:
    return (not _path_whitelisted(p)) and any(p.startswith(pref) for pref in _PROTECTED_PREFIX)

def _parse_basic(h):
    if not h or not str(h).lower().startswith("basic "): return (None,None)
    try:
        u,p=base64.b64decode(str(h).split(" ",1)[1]).decode("utf-8").split(":",1)
        return u,p
    except Exception:
        return (None,None)

class _BasicAuthMW(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        path=str(request.url.path)
        if not _needs_auth(path):
            return await call_next(request)
        u,p=_parse_basic(request.headers.get("authorization"))
        ok = (u is not None
              and hmac.compare_digest(u, _BUSER or "")
              and hmac.compare_digest(p or "", _BPASS or ""))
        if not ok:
            return Response("Unauthorized", status_code=HTTP_401_UNAUTHORIZED,
                            headers={"WWW-Authenticate": 'Basic realm="task-api"'})
        return await call_next(request)

# гарантируем, что app существует и health открыт
try:
    app  # type: ignore[name-defined]
except NameError:
    from fastapi import FastAPI
    app=FastAPI()

# /health, если вдруг нет
try:
    has_health = any([getattr(r,'path',None)=="/health" for r in getattr(app,'routes',[])])
except Exception:
    has_health=False
if not has_health:
    try:
        from fastapi import FastAPI
        @app.get("/health")
        def _health(): return {"status":"ok"}
    except Exception:
        pass

# тестовый защищённый путь
try:
    from fastapi import FastAPI
    @app.get("/tasks/ping")
    def _tping(): return {"ok":True}
except Exception:
    pass

# навешиваем middleware
app.add_middleware(_BasicAuthMW)
# ===== BASIC_AUTH_MIDDLEWARE END =====
