
# --- OCR reports API ---
from fastapi import HTTPException
import os, glob, json

def _lsa_root():
    return os.path.expanduser("~/ai-agent/projects/local_smart_agent")

@app.get("/reports/ocr/list")
def ocr_list(limit: int = 20):
    root = _lsa_root()
    base = os.path.join(root, "reports", "ocr")
    if not os.path.isdir(base):
        return []
    dirs = sorted(glob.glob(os.path.join(base, "*/")), reverse=True)[:limit]
    out = []
    for d in dirs:
        meta = os.path.join(d, "meta.json")
        try:
            m = json.load(open(meta, encoding="utf-8")) if os.path.exists(meta) else {}
        except Exception:
            m = {"status":"error","errors":["bad meta.json"]}
        out.append({
            "id": os.path.basename(os.path.normpath(d)),
            "dir": os.path.relpath(d, root),
            "status": m.get("status","unknown"),
            "pages": m.get("pages"),
            "lang": m.get("lang"),
            "duration_sec": m.get("duration_sec"),
        })
    return out

@app.get("/reports/ocr/latest")
def ocr_latest():
    root = _lsa_root()
    base = os.path.join(root, "reports", "ocr")
    if not os.path.isdir(base):
        raise HTTPException(status_code=404, detail="no ocr reports")
    dirs = sorted(glob.glob(os.path.join(base, "*/")), reverse=True)
    if not dirs:
        raise HTTPException(status_code=404, detail="no ocr reports")
    d = dirs[0]
    meta_p = os.path.join(d, "meta.json")
    text_p = os.path.join(d, "text.txt")
    meta = {}
    try:
        meta = json.load(open(meta_p, encoding="utf-8")) if os.path.exists(meta_p) else {}
    except Exception:
        meta = {"status":"error","errors":["bad meta.json"]}
    text_head = ""
    if os.path.exists(text_p):
        try:
            with open(text_p, "r", encoding="utf-8") as f:
                text_head = "".join([next(f) for _ in range(20)])
        except Exception:
            text_head = ""
    return {
        "dir": os.path.relpath(d, root),
        "meta": meta,
        "text_head": text_head
    }
