#!/usr/bin/env bash
set -Eeuo pipefail
IFS=$'\n\t'

BASE="${HOME}/ai-agent/projects/local_smart_agent"
INBOX="${BASE}/tasks/inbox"
DONE="${BASE}/tasks/done"
FAILED="${BASE}/tasks/failed"
LOG="${BASE}/logs/inbox_watcher.log"

mkdir -p "${INBOX}" "${DONE}" "${FAILED}" "$(dirname "${LOG}")"

log() { printf '%s %s\n' "$(date +'%F %T')" "$*" | tee -a "${LOG}"; }

process_file() {
  local f="$1"
  # читаем JSON безопасно; поддерживаем и {"kind": "..."} и {"task": "..."}
  local kind count
  if ! kind="$(jq -r '(.kind // .task // "")' "$f" 2>>"${LOG}")"; then
    log "[watcher] jq parse error → $f"
    mv -f "$f" "${FAILED}/$(basename "$f")"
    return 1
  fi
  count="$(jq -r '.count // 1' "$f" 2>>"${LOG}" || echo 1)"
  if [[ -z "$kind" || "$kind" == "null" ]]; then
    log "[watcher] unsupported task (no kind/task) → $(basename "$f")"
    mv -f "$f" "${FAILED}/$(basename "$f")"
    return 1
  fi

  case "$kind" in
    report_pack)
      log "[watcher] run report_pack (count=${count}) ← $(basename "$f")"
      # сейчас игнорируем count внутри report_pack.sh (он пакует все доступное);
      # при желании можно расширить интерфейс.
      if "${BASE}/bin/report_pack.sh"; then
        mv -f "$f" "${DONE}/$(basename "$f")"
        log "[watcher] done → $(basename "$f")"
        return 0
      else
        mv -f "$f" "${FAILED}/$(basename "$f")"
        log "[watcher] FAIL (report_pack) → $(basename "$f")"
        return 1
      fi
      ;;
    *)
      log "[watcher] unsupported task kind='${kind}' → $(basename "$f")"
      mv -f "$f" "${FAILED}/$(basename "$f")"
      return 1
      ;;
  esac
}

# основной цикл — опрашиваем папку раз в 1с (надёжнее inotify на некоторых системах)
log "[watcher] start pid=$$"
while true; do
  shopt -s nullglob
  for f in "${INBOX}"/*.json; do
    # обработка с блокировкой: создаём .lock рядом, чтобы не словить гонку
    lock="${f}.lock"
    if ( set -o noclobber; : > "$lock" ) 2>/dev/null; then
      trap 'rm -f "$lock"' RETURN
      process_file "$f" || true
      rm -f "$lock"
      trap - RETURN
    fi
  done
  sleep 1
done
